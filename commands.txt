npm init -y
git init

npm i --save-dev @babel/core @babel/cli @babel/preset-env @babel/preset-react
npm install --save react react-dom
npm i --save-dev webpack webpack-cli webpack-dev-server style-loader css-loader babel-loader
npx webpack-dev-server --mode development
npm i --save-dev react-hot-loader
npm run dev
npm i --save redux react-redux
npm install redux-persist
https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd/related
{
type: 'ADD_TO_DO',
payload: {"text": "This is a test"}
}
Best Practices:
1. When connecting to the Redux Store: export connected & unconnected versions of the components
2. Keep Redux actions and async operations out of reducers
3. Carefully think wich components to connect. The more connections, the less reusability.
   E.g.: Now 'todos' are directly linked with the store.
         What if we want to use the Complete & Incomplete todos separately?

CHALLENGE-1:
    Using the adding / removing example, 
    add: Completed / Incompleted 
        actions
        reducers
        button click handlers -> changes the isCompleted = True
        if isCompleted - the button is invisible, otherwise we can see the button

npm install redux-thunk redux-devtools-extension @babel/runtime
npm i --save-dev @babel/plugin-transform-runtime

cd react-ecosystems-server
npm install
npm run start

CHALLENGE-2:
    Using addition / deletion as examples,
    add:  Completed 
    Mind: it must be a POST request with an id as an argument
    Returns: entire updated todo
    Changes / additions to be made in:
        thunks
        actions
        reducers
        components - must use a thunk instead of an action

npm install reselect
